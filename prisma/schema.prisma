generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BaseAccount {
  id String @id @default(uuid())

  firstName      String
  lastName       String
  email          String    @unique
  emailActivated Boolean   @default(false)
  password       String
  phone          String?   @unique
  gender         Gender?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  avatarUrl      String?
  BirthDate      DateTime?

  sessions Sessions[]

  user                 Users?
  designer             DesignerProfile?
  receivedNotification Notification[]   @relation(name: "notificationReceiver")
  sentNotification     Notification[]   @relation(name: "notificationSender")
}

model Users {
  baseAccountId String @id @unique

  country String?
  city    String?

  age                       Int?
  bodyMeasurementsId        Int?
  stylePreferencesId        Int?
  notificationPreferencesId Int?

  bodyMeasurements        BodyMeasurements?
  notificationPreferences NotificationPreferences?
  stylePreferences        StylePreferences?
  Reviews                 Review[]

  baseAccount     BaseAccount      @relation(fields: [baseAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  appointments    Appointment[]
  bookingRequests BookingRequest[]
}

model BodyMeasurements {
  id            Int      @id @default(autoincrement())
  weight        Float?
  length        Float?
  shoulderWidth Float?
  neck          Float?
  chest         Float?
  arms          Float?
  forearms      Float?
  waist         Float?
  hips          Float?
  thigh         Float?
  belly         Float?
  aboveKnee     Float?
  belowKnee     Float?
  calf          Float?
  userId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          Users    @relation(fields: [userId], references: [baseAccountId])
}

model StylePreferences {
  id          Int      @id @default(autoincrement())
  preferences Json
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        Users    @relation(fields: [userId], references: [baseAccountId])
}

model NotificationPreferences {
  id                           Int     @id @default(autoincrement())
  userId                       String  @unique
  textAppointmentNotifications Boolean @default(true)
  textOffersNotifications      Boolean @default(true)
  user                         Users   @relation(fields: [userId], references: [baseAccountId])
}

model Otps {
  id        String   @id @default(uuid())
  email     String
  code      String   @unique
  expiredAt String   @unique
  createdAt DateTime @default(now())
}

model DesignerProfile {
  baseAccountId   String  @id @unique
  avatarUrl       String
  address         String
  latitude        Decimal
  longtitude      Decimal
  location        String
  yearsExperience Int
  about           String
  workingDays     Json
  ordersFinished  Int

  timeZone String @default("Etc/UTC")

  reviews     Review[]
  services    Service[]
  teamMembers TeamMember[]
  categories  DesignersCategories[]
  portfolios  Portfolio[]

  baseAccount         BaseAccount          @relation(fields: [baseAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  availabilityTimes   AvailabilityTime[]
  appointments        Appointment[]
  bookingRequests     BookingRequest[]
  checkoutSessions    checkoutSession[]
  premiumSubscription premiumSubscription?
}

model AvailabilityTime {
  id Int @id @unique @default(autoincrement())

  dayOfWeek DayOfWeek
  startTime String
  endTime   String

  designerId String
  designer   DesignerProfile @relation(fields: [designerId], references: [baseAccountId])
}

enum BookingRequestStatus {
  Accepted
  Waiting
  Expired
}

model BookingRequest {
  id           Int      @id @unique @default(autoincrement())
  created_at   DateTime @default(now())
  last_updated DateTime @default(now())

  status             BookingRequestStatus
  startDateTime      DateTime
  endDateTime        DateTime
  requestDescription String

  userId      String
  user        Users           @relation(fields: [userId], references: [baseAccountId])
  designerId  String
  designer    DesignerProfile @relation(fields: [designerId], references: [baseAccountId])
  Appointment Appointment?
}

enum AppointmentStatus {
  Booked
  OnGoing
  Finished
  Missed
}

model Appointment {
  id Int @id @default(autoincrement())

  startDateTime DateTime
  endDateTime   DateTime

  status AppointmentStatus

  requestId  Int             @unique
  request    BookingRequest  @relation(fields: [requestId], references: [id])
  userId     String
  user       Users           @relation(fields: [userId], references: [baseAccountId])
  designerId String
  designer   DesignerProfile @relation(fields: [designerId], references: [baseAccountId])
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Service {
  id          String          @id @default(uuid())
  designerId  String
  title       String
  description String
  price       Int
  designer    DesignerProfile @relation(fields: [designerId], references: [baseAccountId], onDelete: Cascade, onUpdate: Cascade)
}

model TeamMember {
  id         String          @id @default(uuid())
  designerId String
  name       String
  role       String
  avatarUrl  String?
  designer   DesignerProfile @relation(fields: [designerId], references: [baseAccountId], onDelete: Cascade, onUpdate: Cascade)
}

model Review {
  id         String          @id @default(uuid())
  designerId String
  avatarUrl  String
  customerId String
  rating     Int
  comment    String
  postedOn   DateTime
  user       Users           @relation(fields: [customerId], references: [baseAccountId])
  designer   DesignerProfile @relation(fields: [designerId], references: [baseAccountId], onDelete: Cascade, onUpdate: Cascade)
}

model Category {
  id        String                @id @default(uuid())
  name      String
  designers DesignersCategories[]
}

model DesignersCategories {
  designer   DesignerProfile @relation(fields: [designerId], references: [baseAccountId])
  designerId String
  Category   Category        @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([designerId, categoryId])
}

model Sessions {
  token      String   @id
  accountId  String   @unique
  ExpiryDate DateTime

  baseAccount BaseAccount @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Gender {
  Male
  Female
}

model Portfolio {
  id         String          @id @default(uuid())
  designerId String
  url        String
  designer   DesignerProfile @relation(fields: [designerId], references: [baseAccountId])
}

enum NotificationType {
  RescheduleRequest
  BookingConfirmed
  Ideas
  AppointmentRequest
  PremiumGranted
  PremiumExpired
  PremiumRevoked
}

enum NotificationSenderType {
  User
  System
}

model Notification {
  id         Int                    @id @default(autoincrement())
  type       NotificationType
  read       Boolean                @default(false)
  details    Json?
  created_at DateTime               @default(now())
  senderType NotificationSenderType
  receiverId String
  receiver   BaseAccount            @relation(fields: [receiverId], references: [id], name: "notificationReceiver", onDelete: Cascade, onUpdate: Cascade)
  senderId   String?
  sender     BaseAccount?           @relation(fields: [senderId], references: [id], name: "notificationSender", onDelete: Cascade, onUpdate: Cascade)
}

model checkoutSession {
  id          String @id
  designerId  String
  checkoutUrl String

  designer DesignerProfile @relation(fields: [designerId], references: [baseAccountId])
}

enum permiumSubscriptionType {
  STANDARD
  PREMIUM
}

model premiumSubscription {
  designerId       String                  @id @unique
  subscriptionType permiumSubscriptionType
  designer         DesignerProfile         @relation(fields: [designerId], references: [baseAccountId])
}

enum UserDeleteAccountReason {
  ACCOUNT_CREATED_BY_MISTAKE
  NO_LONGER_USEFUL
  CANT_FIND_SERVICES_OR_DESIGNERS
  OTHER
}

model AccountDeletes {
  id          Int                     @id @default(autoincrement())
  deleted_at  DateTime                @default(now())
  reason      UserDeleteAccountReason
  otherReason String?
}
